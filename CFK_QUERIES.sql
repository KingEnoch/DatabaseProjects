--   Author:           Enoch Oppong - D19126484
--   Description:      Catering For Kings Case Study 
--   site/type:        Oracle Database 12c
--   Queries:          Complex Queries

--ALTER SCHEMA
ALTER SESSION SET CURRENT_SCHEMA = eoppong;

----------------------------- SELECT QUERIES ------------------>
-- CLIENT TABLE
SELECT * FROM CLIENT;

-- SELECTION FROM CLIENT
SELECT CLIENT_NAME FROM CLIENT 
WHERE CLIENT_NAME = 'Patricia';

-- DISPLAYS PAID FEE IS EQUAL TO YES
SELECT * FROM CLIENT
WHERE PAID_FEE = 'YES';

-- DISPLAYS ADVANCE FEE IS EQUAL TO NO
SELECT CLIENT_NAME,ADVANCE_FEE 
FROM CLIENT
WHERE ADVANCE_FEE = 'NO';

-- DISPLAYS CLIENT IS THAT IS GREATER THAN 3
SELECT * FROM CLIENT
WHERE CLIENT_ID >= 3;

-- PARTY_SERVICE TABLE
SELECT * FROM PARTY_SERVICE;

-- DISPLAYS PMAIN_COURSE WITH THE WILDCARD PLATTER
SELECT PMAIN_COURSE 
FROM PARTY_SERVICE
WHERE PMAIN_COURSE LIKE '%Platter%';

-- FULL_SERVICE TABLE
SELECT * FROM CLIENT;

-- COUNTS HOW MANY ICE-CREAM WILDCARDS THERE ARE 
SELECT COUNT(DISTINCT F_DESSERTS) 
FROM FULL_SERVICE
WHERE F_DESSERTS LIKE '%Ice-cream%';

-- COUNTS STARTERS
SELECT COUNT(*) AS STARTERS
FROM(SELECT DISTINCT F_STARTERS 
FROM FULL_SERVICE);


------------------------------- PROJECT QUERIES  ------------------>
-- CLIENT TABLE
SELECT CLIENT_ID,CLIENT_NAME,CLIENT_NUMBER 
FROM CLIENT; 

-- PARTY SERVICE
SELECT PMAIN_COURSE,P_STARTERS,P_DESSERTS 
FROM PARTY_SERVICE;

-- FULL SERVICE
SELECT CLIENT_CLIENT_ID,FMAIN_COURSE,F_DESSERTS
FROM FULL_SERVICE;

-- MINIMUM SERVICE
SELECT M_STARTERS,M_COFFEE
FROM MINIMUM_SERVICE;


--------------------------------- UNION QUERIES  --------------------------->
-- FULL SERVICE + PARTY SERVICE - DISPLAYS WHETHER THE VALUE IS IN THAT ROW OR THE OTHER
SELECT F_DESSERTS FROM FULL_SERVICE 
WHERE F_DESSERTS = 'Vanilla Ice-cream'
UNION
SELECT P_DESSERTS FROM PARTY_SERVICE 
WHERE P_DESSERTS = 'Chocolate Truffles';

-- FULL SERVICE + PARTY SERVICE - DISPLAYS WHETHER THE VALUE IS IN THAT ROW OR THE OTHER
SELECT FULL_SERVICE_ID,F_DESSERTS FROM FULL_SERVICE 
WHERE F_DESSERTS = 'Vanilla Ice-cream'
UNION
SELECT PARTY_SERVICE_ID,P_DESSERTS FROM PARTY_SERVICE 
WHERE P_DESSERTS = 'Chocolate Ice-cream';

-- PARTY SERVICE - DISPLAYS WHETHER THE VALUE IS IN THAT ROW OR THE OTHER
SELECT CLIENT_CLIENT_ID,P_BEVERAGES FROM PARTY_SERVICE
WHERE P_BEVERAGES = 'Wine'
UNION
SELECT CLIENT_CLIENT_ID,P_BEVERAGES FROM PARTY_SERVICE
WHERE P_BEVERAGES = 'Coke';

-- PARTY SERVICE + MINIMUM SERVICE - DISPLAYS WHETHER THE VALUE IS IN THAT ROW OR THE OTHER USING WILDCARD
SELECT PARTY_SERVICE_ID,PMAIN_COURSE FROM PARTY_SERVICE
WHERE PMAIN_COURSE LIKE '%Platter%'
UNION
SELECT MINIMUM_SERVICE_ID,M_STARTERS FROM MINIMUM_SERVICE
WHERE M_STARTERS LIKE '%Soup%';


-------------------------------- INTERSECT QUERIES  ------------------>
-- FULL SERVICE + PARTY SERVICE - DISPLAYS WHETHER THE VALUE IS IN BOTH ROWS 
SELECT  F_DESSERTS FROM FULL_SERVICE 
WHERE F_DESSERTS = 'Chocolate Ice-cream'
INTERSECT
SELECT P_DESSERTS FROM PARTY_SERVICE 
WHERE P_DESSERTS = 'Chocolate Ice-cream';

-- FULL SERVICE - DISPLAYS WHETHER THE VALUE IS IN BOTH ROWS USING A WILDCARD
SELECT  F_STARTERS FROM FULL_SERVICE 
WHERE F_STARTERS LIKE '%Bread%'
INTERSECT
SELECT P_STARTERS FROM PARTY_SERVICE 
WHERE P_STARTERS LIKE '%Bread%';

-- CLIENT TABLE + RESOURCE - DISPLAYS WHETHER THE VALUE IS IN BOTH ROWS
SELECT PAID_FEE FROM CLIENT 
WHERE PAID_FEE = 'YES'
INTERSECT
SELECT R_VANS FROM RESOURCES
WHERE R_VANS = 'YES';


--------------------------------- MINUS QUERIES  ------------------------->
-- PARTY SERVICE - DISPLAYS WHETHER THE VALUE IS IN ONE ROWS AND NOT THE OTHER USING A WILDCARD
SELECT PMAIN_COURSE FROM PARTY_SERVICE
WHERE PMAIN_COURSE LIKE '%Cuisine%'
MINUS
SELECT PMAIN_COURSE FROM PARTY_SERVICE
WHERE PMAIN_COURSE LIKE '%Platter%';

-- PARTY SERVICE - DISPLAYS WHETHER THE VALUE IS IN ONE ROWS AND NOT THE OTHER USING WILDCARDS
SELECT P_DESSERTS FROM PARTY_SERVICE
WHERE P_DESSERTS LIKE '%Chocolate%'
MINUS
SELECT P_DESSERTS FROM PARTY_SERVICE
WHERE P_DESSERTS = 'Chocolate Ice-cream';

-- CLIENT TABLE - DISPLAYS WHETHER THE VALUE IS IN ONE ROWS AND NOT THE OTHER
SELECT CLIENT_NAME,CLIENT_ADDRESS FROM CLIENT
WHERE CLIENT_NAME = 'Patricia' 
MINUS
SELECT CLIENT_NAME,CLIENT_ADDRESS FROM CLIENT
WHERE CLIENT_NAME = 'Sultan';


------------------------------------ JOIN QUERIES  ------------------------>
-- PARTY + FULL SERVICE - I JOINED BOTH PARTY + SERVICE
SELECT * FROM PARTY_SERVICE
JOIN FULL_SERVICE USING (CLIENT_CLIENT_ID);

-- PARTY + FULL SERVICE - I GET THE RESULTS FOR PLATTER IN PMAIN_COURSE
SELECT * FROM PARTY_SERVICE
JOIN FULL_SERVICE USING (CLIENT_CLIENT_ID)
WHERE party_service.pmain_course LIKE '%Platter%';

-- PARTY + FULL SERVICE - I GET BREAD RESULTS FOR P_STARTERS
SELECT PMAIN_COURSE,P_STARTERS,P_DESSERTS FROM PARTY_SERVICE
JOIN FULL_SERVICE USING (CLIENT_CLIENT_ID)
WHERE FULL_SERVICE.F_STARTERS = 'Bread'
ORDER BY full_service.full_service_id;

-- PARTY + FULL SERVICE - RESULTS FOR BOTH PLATTER AND CUISINE
SELECT * FROM PARTY_SERVICE
JOIN FULL_SERVICE USING (CLIENT_CLIENT_ID)
WHERE party_service.pmain_course LIKE '%Platter%'
UNION
SELECT * FROM PARTY_SERVICE
JOIN FULL_SERVICE USING (CLIENT_CLIENT_ID)
WHERE party_service.pmain_course LIKE '%Cuisine%';

-- PARTY + FULL SERVICE - RESULTS FOR WHAT P_STARTERS + F_STARTERS HAVE IN COMMON 
SELECT * FROM PARTY_SERVICE
JOIN FULL_SERVICE USING (CLIENT_CLIENT_ID)
WHERE party_service.p_starters LIKE '%Bread%'
INTERSECT
SELECT * FROM PARTY_SERVICE
JOIN FULL_SERVICE USING (CLIENT_CLIENT_ID)
WHERE full_service.f_starters LIKE '%Bread%';

-- PARTY + FULL VIEW USING A CLIENT ID JOIN 
SELECT * FROM CONSUMED;
CREATE OR REPLACE VIEW CONSUMED AS (
    SELECT P_STARTERS, F_STARTERS
    FROM PARTY_SERVICE
    JOIN FULL_SERVICE USING (CLIENT_CLIENT_ID)
);